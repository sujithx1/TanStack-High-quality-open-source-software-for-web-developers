/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SigninRouteImport } from './routes/signin'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UsersIndexRouteImport } from './routes/users/index'
import { Route as ProductsIndexRouteImport } from './routes/products/index'
import { Route as UsersUserRouteImport } from './routes/users/$user'
import { Route as ProductsProductIdRouteImport } from './routes/products/$productId'

const SigninRoute = SigninRouteImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersIndexRoute = UsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIndexRoute = ProductsIndexRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersUserRoute = UsersUserRouteImport.update({
  id: '/users/$user',
  path: '/users/$user',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsProductIdRoute = ProductsProductIdRouteImport.update({
  id: '/products/$productId',
  path: '/products/$productId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/signin': typeof SigninRoute
  '/products/$productId': typeof ProductsProductIdRoute
  '/users/$user': typeof UsersUserRoute
  '/products': typeof ProductsIndexRoute
  '/users': typeof UsersIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/signin': typeof SigninRoute
  '/products/$productId': typeof ProductsProductIdRoute
  '/users/$user': typeof UsersUserRoute
  '/products': typeof ProductsIndexRoute
  '/users': typeof UsersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/signin': typeof SigninRoute
  '/products/$productId': typeof ProductsProductIdRoute
  '/users/$user': typeof UsersUserRoute
  '/products/': typeof ProductsIndexRoute
  '/users/': typeof UsersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/signin'
    | '/products/$productId'
    | '/users/$user'
    | '/products'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/signin'
    | '/products/$productId'
    | '/users/$user'
    | '/products'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/signin'
    | '/products/$productId'
    | '/users/$user'
    | '/products/'
    | '/users/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  SigninRoute: typeof SigninRoute
  ProductsProductIdRoute: typeof ProductsProductIdRoute
  UsersUserRoute: typeof UsersUserRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/$user': {
      id: '/users/$user'
      path: '/users/$user'
      fullPath: '/users/$user'
      preLoaderRoute: typeof UsersUserRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/$productId': {
      id: '/products/$productId'
      path: '/products/$productId'
      fullPath: '/products/$productId'
      preLoaderRoute: typeof ProductsProductIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  SigninRoute: SigninRoute,
  ProductsProductIdRoute: ProductsProductIdRoute,
  UsersUserRoute: UsersUserRoute,
  ProductsIndexRoute: ProductsIndexRoute,
  UsersIndexRoute: UsersIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
